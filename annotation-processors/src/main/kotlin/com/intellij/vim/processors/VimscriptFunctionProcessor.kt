/*
 * Copyright 2003-2023 The IdeaVim authors
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE.txt file or at
 * https://opensource.org/licenses/MIT.
 */

package com.intellij.vim.processors

import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.processing.SymbolProcessorEnvironment
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSFile
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.intellij.vim.FileWriter
import com.intellij.vim.annotations.VimscriptFunction
import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

class VimscriptFunctionProcessor(private val environment: SymbolProcessorEnvironment) : SymbolProcessor {
  companion object {
    const val comment = """# This file was automatically generated by [com.intellij.vim.processor.VimscriptFunctionProcessor].
# If you are going to change it, you are probably doing something wrong, as your changes will be overridden by the next `gradle kspKotlin` run.

"""
  }
  private val visitor = VimscriptFunctionVisitor()
  private val writer = FileWriter()
  private val nameToClass = mutableMapOf<String, String>()


  override fun process(resolver: Resolver): List<KSAnnotated> {
    resolver.getAllFiles().forEach { it.accept(visitor, Unit) }
    val filePath = environment.options["generated_directory"]!! + "/" + environment.options["vimscript_functions_file"]!!
    writer.writeFile(filePath, writer.getYAML(comment, nameToClass))
    return emptyList()
  }

  // todo inspection that annotation is properly used on proper classes
  private inner class VimscriptFunctionVisitor : KSVisitorVoid() {
    @OptIn(KspExperimental::class)
    override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
      val vimscriptFunctionAnnotation = classDeclaration.getAnnotationsByType(VimscriptFunction::class).firstOrNull() ?: return
      val functionName = vimscriptFunctionAnnotation.name
      nameToClass[functionName] = classDeclaration.qualifiedName!!.asString()
    }

    override fun visitFile(file: KSFile, data: Unit) {
      file.declarations.forEach { it.accept(this, Unit) }
    }
  }
}

